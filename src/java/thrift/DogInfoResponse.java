/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class DogInfoResponse implements TBase<DogInfoResponse, DogInfoResponse._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("DogInfoResponse");

  private static final TField CUTE_BREEDS_FIELD_DESC = new TField("cuteBreeds", TType.LIST, (short)1);


  public List<String> cuteBreeds;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    CUTE_BREEDS((short)1, "cuteBreeds");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CUTE_BREEDS
  	return CUTE_BREEDS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CUTE_BREEDS, new FieldMetaData("cuteBreeds", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(DogInfoResponse.class, metaDataMap);
  }


  public DogInfoResponse() {
  }

  public DogInfoResponse(
    List<String> cuteBreeds)
  {
    this();
    this.cuteBreeds = cuteBreeds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DogInfoResponse(DogInfoResponse other) {
    if (other.isSetCuteBreeds()) {
      List<String> __this__cuteBreeds = new ArrayList<String>();
      for (String other_element : other.cuteBreeds) {
        __this__cuteBreeds.add(other_element);
      }
      this.cuteBreeds = __this__cuteBreeds;
    }
  }

  public DogInfoResponse deepCopy() {
    return new DogInfoResponse(this);
  }

  @Override
  public void clear() {
    this.cuteBreeds = null;
  }

  public int getCuteBreedsSize() {
    return (this.cuteBreeds == null) ? 0 : this.cuteBreeds.size();
  }

  public java.util.Iterator<String> getCuteBreedsIterator() {
    return (this.cuteBreeds == null) ? null : this.cuteBreeds.iterator();
  }

  public void addToCuteBreeds(String elem) {
    if (this.cuteBreeds == null) {
      this.cuteBreeds = new ArrayList<String>();
    }
    this.cuteBreeds.add(elem);
  }

  public List<String> getCuteBreeds() {
    return this.cuteBreeds;
  }

  public DogInfoResponse setCuteBreeds(List<String> cuteBreeds) {
    this.cuteBreeds = cuteBreeds;
    
    return this;
  }

  public void unsetCuteBreeds() {
    this.cuteBreeds = null;
  }

  /** Returns true if field cuteBreeds is set (has been asigned a value) and false otherwise */
  public boolean isSetCuteBreeds() {
    return this.cuteBreeds != null;
  }

  public void setCuteBreedsIsSet(boolean value) {
    if (!value) {
      this.cuteBreeds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CUTE_BREEDS:
      if (value == null) {
        unsetCuteBreeds();
      } else {
        setCuteBreeds((List<String>)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CUTE_BREEDS:
      return getCuteBreeds();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CUTE_BREEDS:
      return isSetCuteBreeds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DogInfoResponse)
      return this.equals((DogInfoResponse)that);
    return false;
  }

  public boolean equals(DogInfoResponse that) {
    if (that == null)
      return false;
    boolean this_present_cuteBreeds = true && this.isSetCuteBreeds();
    boolean that_present_cuteBreeds = true && that.isSetCuteBreeds();
    if (this_present_cuteBreeds || that_present_cuteBreeds) {
      if (!(this_present_cuteBreeds && that_present_cuteBreeds))
        return false;
      if (!this.cuteBreeds.equals(that.cuteBreeds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_cuteBreeds = true && (isSetCuteBreeds());
    builder.append(present_cuteBreeds);
    if (present_cuteBreeds)
      builder.append(cuteBreeds);
    return builder.toHashCode();
  }

  public int compareTo(DogInfoResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DogInfoResponse typedOther = (DogInfoResponse)other;

    lastComparison = Boolean.valueOf(isSetCuteBreeds()).compareTo(typedOther.isSetCuteBreeds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCuteBreeds()) {
      lastComparison = TBaseHelper.compareTo(this.cuteBreeds, typedOther.cuteBreeds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // CUTE_BREEDS
          if (field.type == TType.LIST) {
            {
            TList _list4 = iprot.readListBegin();
            this.cuteBreeds = new ArrayList<String>(_list4.size);
            for (int _i5 = 0; _i5 < _list4.size; ++_i5)
            {
              String _elem6;
              _elem6 = iprot.readString();
              this.cuteBreeds.add(_elem6);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.cuteBreeds != null) {
      oprot.writeFieldBegin(CUTE_BREEDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.cuteBreeds.size()));
        for (String _iter7 : this.cuteBreeds)
        {
          oprot.writeString(_iter7);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DogInfoResponse(");
    boolean first = true;
    sb.append("cuteBreeds:");
    if (this.cuteBreeds == null) {
      sb.append("null");
    } else {
      sb.append(this.cuteBreeds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
